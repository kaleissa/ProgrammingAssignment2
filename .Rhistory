mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
solve(mdat)
mdat <- matrix(c(1,2,3, 11,12,13, 14,15,16), nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2","row3"),
c("C.1", "C.2", "C.3")))
mdat
solve(mdat)
mdat <- matrix(c(1,2,3,), nrow = 3, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2","row3"),
c("C.1", "C.2", "C.3")))
mdat <- matrix(c(1), nrow = 1, ncol = 1, byrow = TRUE,
dimnames = list(c("row1"),
c("C.1")))
mdat
solve(mdat)
library("swirl", lib.loc="~/R/win-library/3.1")
ls
ls()
rm(list=ls())
swirl()
num_vect<-vector.numeric(.5,55,-10,6)
num_vect<-vector(.5,55,-10,6)
num_vector<-c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect<=6
num_vect<=6
num_vect>=6
my_char<-c("my","name","is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
c(my_char,
| "kaleissa")
c(my_char, "kaleissa")
my_name<-c(my_char, "kaleissa")
my_name
paste(my_name, collapse=" ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makevector(1,2,3,4)
a  <- makeVector(10:1)
a$cachemean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a$cachemean()
a$cachemean()
a  <- makeVector(10:1)
a$cachemean()
crazy <- function() {
x <- 3.14
print(x)
{ print(x); x <<- 42; print(x) }
print(x)
}
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## Write a short comment describing  function
cacheSolve <- function(x, ...) {
s <- x$getsolve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setsolve(s)
s
} ## Return a matrix that is the inverse of 'x'
makechachematrix(1:10)
a<-makeCacheMatrix(1:10)
a
cacheSolve(a)
a<-makeCacheMatrix(1:8)
cacheSolve(a)
x
x$cacheSolve
x$makeCacheMatrix
x = matrix(x)
makeCacheMatrix <- function(x = matrix(x))
makeCacheMatrix(2)
a
a$cacheSolve
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(1:22)
makeCacheMatrix
a
x
x$makeCacheMatrix
cacheSolve(a)
source('~/Coursera/ProgrammingAssignment2/cachematrix.R')
